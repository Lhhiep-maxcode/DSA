Hints: we will use bfs/dijkstra to solve this problem


Code sample:
import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'quickestWayUp' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. 2D_INTEGER_ARRAY ladders
     *  2. 2D_INTEGER_ARRAY snakes
     */
    private static int LADDER = -10;
    private static int SNAKE = -11;

    public static int quickestWayUp(List<List<Integer>> ladders, List<List<Integer>> snakes) {
    // Write your code here
        Map<Integer, Integer> ladd = new HashMap<>();
        Map<Integer, Integer> snak = new HashMap<>();
        //initialize matrix
        List<Integer> board = new ArrayList<>();
        for(int i = 0; i < 100; i++) board.add(0);
        board.set(99, -1);
        //hash ladders and snakes
        for(int i = 0; i < ladders.size(); i++)
        {
            board.set(ladders.get(i).get(0) - 1, LADDER);
            ladd.put(ladders.get(i).get(0) - 1, ladders.get(i).get(1) - 1);
        }
        for(int i = 0; i < snakes.size(); i++)
        {
            board.set(snakes.get(i).get(0) - 1, SNAKE);
            snak.put(snakes.get(i).get(0) - 1, snakes.get(i).get(1) - 1);
        }
        //bfs
        Queue<Integer> queue = new LinkedList<>();
        queue.add(0);
        while(queue.isEmpty() == false)
        {
            int pos = queue.poll();
            //6 possible cases when rolling a dice
            for(int i = 1; i <= 6; i++)
            {
                int newpos = pos + i;
                if(newpos > 99) break;
                if(board.get(newpos) > 0) continue;
                else if(board.get(newpos) == 0)
                {
                    board.set(newpos, board.get(pos) + 1);
                    queue.add(newpos);
                }
                else if(board.get(newpos) == LADDER)
                {
                    board.set(newpos, board.get(pos) + 1);
                    if(board.get(ladd.get(newpos)) <= 0)
                    {
                        board.set(ladd.get(newpos), board.get(pos) + 1);
                        queue.add(ladd.get(newpos));
                    }
                }
                else if(board.get(newpos) == SNAKE)
                {
                    board.set(newpos, board.get(pos) + 1);
                    if(board.get(snak.get(newpos)) <= 0)
                    {
                        board.set(snak.get(newpos), board.get(pos) + 1);
                        queue.add(snak.get(newpos));
                    }
                }
            }
        }
        return board.get(99);
    }

}

public class HelloWorld {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        

        int t = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, t).forEach(tItr -> {
            try {
                int n = Integer.parseInt(bufferedReader.readLine().trim());

                List<List<Integer>> ladders = new ArrayList<>();

                IntStream.range(0, n).forEach(i -> {
                    try {
                        ladders.add(
                            Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                                .map(Integer::parseInt)
                                .collect(toList())
                        );
                    } catch (IOException ex) {
                        throw new RuntimeException(ex);
                    }
                });

                int m = Integer.parseInt(bufferedReader.readLine().trim());

                List<List<Integer>> snakes = new ArrayList<>();

                IntStream.range(0, m).forEach(i -> {
                    try {
                        snakes.add(
                            Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                                .map(Integer::parseInt)
                                .collect(toList())
                        );
                    } catch (IOException ex) {
                        throw new RuntimeException(ex);
                    }
                });

                int result = Result.quickestWayUp(ladders, snakes);
                System.out.println(result);
                
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

      
    }
}
