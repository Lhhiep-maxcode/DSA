Explaination:
This problem is related to tranverse/search the tree. When we read the problem, it talks about ancestor node right? Therefore, we can think about dfs/bfs. 
In this problem, i prefer to use dfs. 
However, the porblem is that we also have to think a way to tranverse up the ancestor, at the same time tranverse down as dfs. 
(we can use array to save ancestor of each node)


//Code Sample: (2 test cases exceed time limit)

#include <bits/stdc++.h>
using namespace std;

void tranverse(int const now, int vertex, vector<int> const &ancestor, int const k, int &count)
{
    if(ancestor[vertex] == 0) return;
    else
    {
        if(abs(ancestor[vertex] - now) <= k) count++;
        tranverse(now, ancestor[vertex], ancestor, k, count);
    }
}

void dfs(int vertex, int &count, int const &k, vector<bool> &check, vector<int> &ancestor, vector<vector<int>> &vertices)
{
    check[vertex] = true;
    int sz = vertices[vertex].size();
    for(int i = 0; i < sz; i++)
    {
        if(check[vertices[vertex][i]] == false)
        {
            ancestor[vertices[vertex][i]] = vertex;
            if(abs(vertex - vertices[vertex][i]) <= k)
            {
                count++;
            }
            tranverse(vertices[vertex][i], vertex, ancestor, k, count);
            dfs(vertices[vertex][i], count, k, check, ancestor, vertices);
        }
    }
}

int similarPair(int n, int k, vector<vector<int>> edges)
{
    int count = 0;
    vector<int> ancestor(n + 1, 0);
    vector<vector<int>> vertices(n + 1, vector<int>());
    for(int i = 0; i < n - 1; i++)
    {
        vertices[edges[i][0]].push_back(edges[i][1]);
        vertices[edges[i][1]].push_back(edges[i][0]);
    }
    vector<bool> check(n, false);
    dfs(edges[0][0], count, k, check, ancestor, vertices);
    return count;
}

int main() {
    int n, k;
    cin >> n >> k;
    vector<vector<int>> edges(n - 1, vector<int> (2, 0));
    for(int i = 0; i < n - 1; i++)
    {
        cin >> edges[i][0] >> edges[i][1];
    }
    cout << similarPair(n, k, edges);
    return 0;
}
