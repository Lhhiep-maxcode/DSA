Steps to solve this problem:
1. Count how many people from a country and how many coutries (use dfs/bfs to create seperated connected graph)
2. Calculate how many ways to choose 2 people from different countries


//Code sample:
import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'journeyToMoon' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER n
     *  2. 2D_INTEGER_ARRAY astronaut
     */
     
    public static long dfs(int v, List<List<Integer>> adjlist, boolean visited[])
    {
        long res = 1;
        visited[v] = true;
        for(int i = 0; i < adjlist.get(v).size(); i++)
        {
            if(visited[adjlist.get(v).get(i)] == false)
            {
                res += dfs(adjlist.get(v).get(i), adjlist, visited);
            }
        }
        return res;
    }

    public static long journeyToMoon(int n, List<List<Integer>> astronaut) {
    // Write your code here
        List<List<Integer>> adjlist = new ArrayList<>();
        for(int i = 0; i < n; i++)
        {
            adjlist.add(new ArrayList<>());
        }
        for(int i = 0; i < astronaut.size(); i++)
        {
            int x1 = astronaut.get(i).get(0);
            int x2 = astronaut.get(i).get(1);
            adjlist.get(x1).add(x2);
            adjlist.get(x2).add(x1);
        }
        boolean visited[] = new boolean[n];
        List<Long> res = new ArrayList<>();
        long count = 0;
        for(int i = 0; i < n; i++)
        {
            if(visited[i] == false)
            {
                long x = dfs(i, adjlist, visited);
                if(x == 1) count++;
                else res.add(x);
            }
        }
        // calculate how many ways to choose 2 people from different countries
        long ans = 0;
        for(int i = 1; i < res.size(); i++)
        {
            for(int j = 0; j < i; j++)
            {
                ans += res.get(i) * res.get(j);
            }
        }
        for(int i = 0; i < res.size(); i++)
        {
            ans += res.get(i) * count;
        }
        long tu = 1;
        long mau = 1;
        for(int i = 1; i <= 2; i++)
        {
            tu *= (count - 2 + i);
            mau *= i;
        }
        ans += tu / mau;
        return ans;
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int n = Integer.parseInt(firstMultipleInput[0]);

        int p = Integer.parseInt(firstMultipleInput[1]);

        List<List<Integer>> astronaut = new ArrayList<>();

        IntStream.range(0, p).forEach(i -> {
            try {
                astronaut.add(
                    Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                        .map(Integer::parseInt)
                        .collect(toList())
                );
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        long result = Result.journeyToMoon(n, astronaut);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
