Explaination: 
When it comes to this problem, the first thing come to my mind is use bfs or dfs to search for connected cells.
(because of grid and connected cell)
(This kind of problem just like KnightL as i explained)
Because of the amount of coding, i prefer dfs.

Code sample:
#include<iostream>
#include<algorithm>
#include<cstring>
#include<map>
#include<queue>
#include<vector>
using namespace std;

vector<pair<int, int>> movement = {{1, 0}, {-1, 0}, {0, -1}, {0, 1}, {-1, -1}, {-1, 1}, {1, 1}, {1, -1}};

int dfs(vector<vector<int>> &matrix, int r, int c, int m, int n)
{
    int ans = 1;
    matrix[r][c] = 0;
    for(int i = 0; i < 8; i++)
    {
        int y = r + movement[i].first;
        int x = c + movement[i].second;
        if(y >= 0 && y < m && x >= 0 && x < n && matrix[y][x] == 1)
        {
            ans = ans + dfs(matrix, y, x, m, n);
        }
    }
    return ans;
}

int connectedCell(vector<vector<int>> matrix) {
    int r = matrix.size();
    int c = matrix[0].size();
    int ans = 0;
    for(int i = 0; i < r; i++)
    {
        for(int j = 0; j < c; j++)
        {
            if(matrix[i][j] != 0)
            {
                ans = max(ans, dfs(matrix, i, j, r, c));
            }
        }
    }   
    return ans;
}

int main()
{
    int m, n;
    cin >> m >> n;
    vector<vector<int>> matrix(m, vector<int>(n, 0));
    for(int i = 0; i < m; i++)
    {
        for(int j = 0; j < n; j++)
        {
            cin >> matrix[i][j];
        }
    }
    cout << connectedCell(matrix);
	return 0;
}
