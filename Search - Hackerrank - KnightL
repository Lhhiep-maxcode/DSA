#include<iostream>
#include<algorithm>
#include<cstring>
#include<map>
#include<queue>
#include<vector>
using namespace std;

int bfs(int x, int y, int n)
{
    vector<vector<int>> check(n, vector<int> (n, 0));
    vector<pair<int, int>> movement = {{-x, -y}, {-x, y}, {-y, x}, {y, x}, {x, y}, {x, -y}, {y, -x}, {-y, -x}};
    int count = 0;
    queue<pair<int, int>> q;
    pair<int, int> stage(0, 0);
    q.push(stage);
    check[0][0] = 1;
    stage.first = q.front().first;
    stage.second = q.front().second;
    bool needtochange = false;
    while(q.empty() == false)
    {
        int x1 = q.front().first;
        int y1 = q.front().second;
        if(x1 == stage.first && y1 == stage.second)
        {
            needtochange = true;
            count++;
        }
        for(int i = 0; i < 8; i++)
        {
            int x2 = x1 + movement[i].first;
            int y2 = y1 + movement[i].second;
            if(x2 >= 0 && y2 >= 0 && x2 < n && y2 < n && check[x2][y2] == 0)
            {
                if(needtochange)
                {
                    stage.first = x2;
                    stage.second = y2;
                    needtochange = false;
                }
                if(x2 == n - 1 && y2 == n - 1)
                {
                    return count;
                }
                pair<int, int> temp(x2, y2);
                check[x2][y2] = 1;
                q.push(temp);
            }
        }
        q.pop();
    }
    return -1;
}

int main()
{
    int n;
    cin >> n;
    vector<vector<int>> ans(n - 1, vector<int> (n - 1, 0));
    for(int i = 0; i < n - 1; i++)
    {
        for(int j = 0; j < n - 1; j++)
        {
            if(ans[j][i] != 0)
            {
                ans[i][j] = ans[j][i];
            }
            else
            {
                ans[i][j] = bfs(i + 1, j + 1, n);
            }
            cout << ans[i][j] << " ";
        }
        cout << endl;
    }
	return 0;
}
