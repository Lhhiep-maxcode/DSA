import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Node
{
    int val;	//Value
    int ht;		//Height
    Node left;	//Left child
    Node right;	//Right child
}

public class HelloWorld {
    static void bfs(Node root, int n)
    {
        LinkedList<Node> queue = new LinkedList<>();
        queue.add(root);
        while(queue.size() != 0)
        {
            Node tmp = queue.poll();
            System.out.print(tmp.val + " ");
            if(tmp.left != null) queue.add(tmp.left);
            if(tmp.right != null) queue.add(tmp.right);
        }
    }
    static Node rotation(Node root, int balanceFactor)
    {
        Node a = null;
        Node b = null;
        Node c = null;
        int a_right_ht = -1;
        int a_left_ht = -1;
        int b_right_ht = -1;
        int b_left_ht = -1;
        if(balanceFactor < 0)
        {
            a = root;
            b = a.right;
            if(b.left != null) b_left_ht = b.left.ht;
            if(b.right != null) b_right_ht = b.right.ht;
            if(b_right_ht >= b_left_ht) c = b.right;
            else c = b.left;
            a_right_ht = -1;
            a_left_ht = -1;
            b_right_ht = -1;
            b_left_ht = -1;
            if(a.val < b.val && b.val < c.val)  //left rotation
            {
                a.right = b.left;
                b.left = a;
                if(a.left != null) a_left_ht = a.left.ht;
                if(a.right != null) a_right_ht = a.right.ht;
                a.ht = Math.max(a_left_ht, a_right_ht) + 1;
                b.ht = Math.max(a.ht, c.ht) + 1;
                root = b;
            }
            else if(a.val < b.val && b.val > c.val)  //right-left rotation
            {
                b.left = c.right;
                a.right = c.left;
                c.right = b;
                c.left = a;
                if(a.left != null) a_left_ht = a.left.ht;
                if(a.right != null) a_right_ht = a.right.ht;
                if(b.left != null) b_left_ht = b.left.ht;
                if(b.right != null) b_right_ht = b.right.ht;
                a.ht = Math.max(a_left_ht, a_right_ht) + 1;
                b.ht = Math.max(b_left_ht, b_right_ht) + 1;
                c.ht = Math.max(a.ht, b.ht) + 1;
                root = c;
            }
        }
        else if(balanceFactor > 0)
        {
            a = root;
            b = a.left;
            if(b.left != null) b_left_ht = b.left.ht;
            if(b.right != null) b_right_ht = b.right.ht;
            if(b_left_ht >= b_right_ht) c = b.left;
            else c = b.right;
            a_right_ht = -1;
            a_left_ht = -1;
            b_right_ht = -1;
            b_left_ht = -1;
            if(a.val > b.val && b.val > c.val)  //right rotation
            {
                a.left = b.right;
                b.right = a;
                if(a.left != null) a_left_ht = a.left.ht;
                if(a.right != null) a_right_ht = a.right.ht;
                a.ht = Math.max(a_left_ht, a_right_ht) + 1;
                b.ht = Math.max(a.ht, c.ht) + 1;
                root = b;
            }
            else if(a.val > b.val && b.val < c.val)   //left-right rotation
            {
                b.right = c.left;
                a.left = c.right;
                c.left = b;
                c.right = a;
                if(a.left != null) a_left_ht = a.left.ht;
                if(a.right != null) a_right_ht = a.right.ht;
                if(b.left != null) b_left_ht = b.left.ht;
                if(b.right != null) b_right_ht = b.right.ht;
                a.ht = Math.max(a_left_ht, a_right_ht) + 1;
                b.ht = Math.max(b_left_ht, b_right_ht) + 1;
                c.ht = Math.max(a.ht, b.ht) + 1;
                root = c;
            }
        }
        return root;
    }
    static Node insert(Node root, int val)
    {
        if(root == null)
        {
            Node tmp = new Node();
            tmp.left = null;
            tmp.right = null;
            tmp.val = val;
            tmp.ht = 0;
            return tmp;
        }
    	if(val > root.val)
        {
            root.right = insert(root.right, val); 
        }
        else if(val < root.val)
        {
            root.left = insert(root.left, val);
        }
        int leftHeight = -1;
        int rightHeight = -1;
        if(root.left != null)
        {
            leftHeight = root.left.ht;
        }
        if(root.right != null)
        {
            rightHeight = root.right.ht;
        }
        root.ht = Math.max(leftHeight, rightHeight) + 1;
        int balanceFactor = leftHeight - rightHeight;
        if(balanceFactor > 1 || balanceFactor < -1)
        {
            root = rotation(root, balanceFactor);
        }
        return root;
    }
    public static void main(String[] args) throws IOException {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int num = n;
        Node root = null;
        while(n-- > 0)
        {
            int val = sc.nextInt();
            root = insert(root, val);
        }
        bfs(root, num);
        sc.close();
    }
}
