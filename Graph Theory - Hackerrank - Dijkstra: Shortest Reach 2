Hints: 
  Use Dijsktra to solve this problem as it's related to shortest path. 
  However, we should notice that it requires shortest path to all other nodes. 
  Therefore, we have to aplly this algorithm to all nodes instead of one specific node

Code sample:
#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);

/*
 * Complete the 'shortestReach' function below.
 *
 * The function is expected to return an INTEGER_ARRAY.
 * The function accepts following parameters:
 *  1. INTEGER n
 *  2. 2D_INTEGER_ARRAY edges
 *  3. INTEGER s
 */

vector<int> shortestReach(int n, vector<vector<int>> edges, int s) {
    vector<vector<pair<int, int>>> adj(n, vector<pair<int, int>>());
    //adj : {vertex, weight}
    for(int i = 0; i < edges.size(); i++)
    {
        int v1 = edges[i][0] - 1;
        int v2 = edges[i][1] - 1;
        int w = edges[i][2];
        adj[v1].push_back({v2, w});
        adj[v2].push_back({v1, w});
    }
    vector<int> res(n, -1);
    set<pair<int, int>> st;
    //set : {weight, vertex}
    st.insert({0, s - 1});
    while(st.size() != 0)
    {
        pair<int, int> tmp = *(st.begin());
        st.erase(st.begin());
        if(res[tmp.second] < tmp.first && res[tmp.second] != -1) continue;
        res[tmp.second] = tmp.first;
        for(int i = 0; i < adj[tmp.second].size(); i++)
        {
            st.insert({adj[tmp.second][i].second + res[tmp.second], adj[tmp.second][i].first});
        }
    }
    res.erase(res.begin() + s - 1);
    return res;
}

int main()
{
    //ofstream fout(getenv("OUTPUT_PATH"));

    string t_temp;
    getline(cin, t_temp);

    int t = stoi(ltrim(rtrim(t_temp)));

    for (int t_itr = 0; t_itr < t; t_itr++) {
        string first_multiple_input_temp;
        getline(cin, first_multiple_input_temp);

        vector<string> first_multiple_input = split(rtrim(first_multiple_input_temp));

        int n = stoi(first_multiple_input[0]);

        int m = stoi(first_multiple_input[1]);

        vector<vector<int>> edges(m);

        for (int i = 0; i < m; i++) {
            edges[i].resize(3);

            string edges_row_temp_temp;
            getline(cin, edges_row_temp_temp);

            vector<string> edges_row_temp = split(rtrim(edges_row_temp_temp));

            for (int j = 0; j < 3; j++) {
                int edges_row_item = stoi(edges_row_temp[j]);

                edges[i][j] = edges_row_item;
            }
        }

        string s_temp;
        getline(cin, s_temp);

        int s = stoi(ltrim(rtrim(s_temp)));

        vector<int> result = shortestReach(n, edges, s);

        for (int i = 0; i < result.size(); i++) {
            cout << result[i];

            if (i != result.size() - 1) {
                cout << " ";
            }
        }

        cout << "\n";
    }

    //fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;

    string::size_type start = 0;
    string::size_type end = 0;

    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));

        start = end + 1;
    }

    tokens.push_back(str.substr(start));

    return tokens;
}
